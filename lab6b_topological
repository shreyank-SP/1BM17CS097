  #include<iostream>#define N 4 
2
#include <stdbool.h> 
3
#include <stdio.h> 
4
​
5
void printSolution(int board[N][N]) 
6
{ 
7
        for (int i = 0; i < N; i++) { 
8
                for (int j = 0; j < N; j++) 
9
                        printf(" %d ", board[i][j]); 
10
                printf("\n"); 
11
        } 
12
} 
13
​
14
bool isSafe(int board[N][N], int row, int col) 
15
{ 
16
        int i, j; 
17
​
18
        for (i = 0; i < col; i++) 
19
                if (board[row][i]) 
20
                        return false; 
21
​
22
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--) 
23
                if (board[i][j]) 
24
                        return false; 
25
​
26
        for (i = row, j = col; j >= 0 && i < N; i++, j--) 
27
                if (board[i][j]) 
28
                        return false; 
29
​
30
        return true; 
31
} 
32
​
33
​
34
bool solveNQUtil(int board[N][N], int col) 
35
{ 
36
        if (col >= N) 
37
                return true; 
38
​
39
        for (int i = 0; i < N; i++) { 
40
​
41
                if (isSafe(board, i, col)) { 
42
​
43
                        board[i][col] = 1; 
44
                        if (solveNQUtil(board, col + 1)) 
45
                                return true; 
46
​
47
                        board[i][col] = 0; 
48
                } 
49
        } 
